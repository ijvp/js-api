# Tests and builds the node application, then uploads the build to GH artifact registry.
# Then creates a docker image and pushes it to ECR. Finally, ssh into an EC2 instance
# and deploys the container.

name: "Deploy API to EC2"

on:
  push:
    branches:
      - main

env:
  AWS_REGION: sa-east-1
  AWS_ECR_REPO: 141978955262.dkr.ecr.sa-east-1.amazonaws.com/iris
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - run: npm ci
      - run: npm run build
      - run: npm test

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist

      - name: Upload package.json
        uses: actions/upload-artifact@v4
        with:
          name: package-json
          path: ./package.json

      - name: Upload package-lock.json
        uses: actions/upload-artifact@v4
        with:
          name: package-lock-json
          path: ./package-lock.json

      - name: Upload Dockerfile
        uses: actions/upload-artifact@v4
        with:
          name: Dockerfile
          path: ./Dockerfile

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download dist directory
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./dist

      - name: Download package.json
        uses: actions/download-artifact@v4
        with:
          name: package-json
          path: ./

      - name: Download package-lock.json
        uses: actions/download-artifact@v4
        with:
          name: package-lock-json
          path: ./

      - name: Download Dockerfile
        uses: actions/download-artifact@v4
        with:
          name: Dockerfile
          path: ./

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
          registry-type: private

      - name: Build and push Docker image to ECR
        run: |
          docker build -t ${{ env.AWS_ECR_REPO }}:latest ./dist
          docker tag ${{ env.AWS_ECR_REPO }}:latest ${{ env.AWS_ECR_REPO }}:${{ github.sha }}
          docker push ${{ env.AWS_ECR_REPO }}:${{ github.sha }}
          docker push ${{ env.AWS_ECR_REPO }}:latest

      - name: SSH into EC2 instance and deploy container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SSH_HOST }}
          username: ${{ secrets.EC2_SSH_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            if [ "$(docker ps -aq -f name=js-api)" ]; then
              sudo docker stop js-api
              sudo docker rm js-api
            fi

            sudo docker image prune -af

            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ env.AWS_REGION }}

            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ECR_REPO }}

            docker pull ${{ env.AWS_ECR_REPO }}:${{ github.sha }}

            sudo docker run -d -p 8080:8080 --name js-api --restart on-failure --env-file /etc/js-api/.env ${{ env.AWS_ECR_REPO }}:${{ github.sha }}
